#!/usr/bin/env bash
set -euo pipefail

# Generated by Terraform
# Cluster: ${cluster_name}
# Resource Group: ${resource_group}
# NGINX Controller Manifest: ${nginx_manifest}
# Enable ASVNI: ${enable_asvni}
# API Server Subnet ID: ${apiserver_subnet_id}

# Optionally enable API Server VNet Integration (ASVNI) via Azure CLI
if [[ "${enable_asvni}" == "true" && -n "${apiserver_subnet_id}" ]]; then
  echo "[INFO] Enabling API Server VNet Integration for cluster: ${cluster_name}"
  az aks update \
    --name "${cluster_name}" \
    --resource-group "${resource_group}" \
    --enable-apiserver-vnet-integration \
    --apiserver-subnet-id "${apiserver_subnet_id}" || {
      echo "[WARN] az aks update failed (possibly already enabled). Continuing." >&2
    }
fi

echo "[INFO] Connecting to AKS cluster: ${cluster_name} (RG: ${resource_group})"
az aks get-credentials --resource-group "${resource_group}" --name "${cluster_name}" --overwrite-existing 1>/dev/null

if command -v kubectx >/dev/null 2>&1; then
  echo "[INFO] Switching kubectx to: ${cluster_name}"
  kubectx "${cluster_name}" || true
else
  echo "[WARN] kubectx not found; attempting kubectl context switch"
  kubectl config use-context "${cluster_name}" || true
fi

echo "[INFO] Current context: $(kubectl config current-context)"

echo "[INFO] Applying NGINX Ingress Controller manifest: ${nginx_manifest}"
if [[ ! -f "${nginx_manifest}" ]]; then
  echo "[ERROR] Manifest not found: ${nginx_manifest}" >&2
  exit 1
fi
kubectl apply -f "${nginx_manifest}"

echo "[INFO] Controller service status (namespace: app-routing-system)"
kubectl get svc -n app-routing-system -l app.kubernetes.io/component=controller -o wide || true

echo "[INFO] kube-system pods (first 50):"
kubectl get pods -n kube-system -o wide | head -n 50 || true

echo "[INFO] Node status:"
kubectl get nodes -o wide || true


echo "[INFO] Patching aks-istio-ingressgateway-internal service for internal Azure Load Balancer"
kubectl -n aks-istio-ingress patch svc aks-istio-ingressgateway-internal \
  --type merge -p '{
    "metadata": {
      "annotations": {
        "service.beta.kubernetes.io/azure-load-balancer-internal": "true",
        "service.beta.kubernetes.io/azure-load-balancer-internal-subnet": "${subnet_name}",
        "service.beta.kubernetes.io/azure-load-balancer-ipv4": "${internal_ip}"
      }
    }
  }' || {
    echo "[WARN] Failed to patch aks-istio-ingressgateway-internal service." >&2
  }


echo "[INFO] Creating wildcard certificate secret in namespace: aks-istio-ingress"
./istio-wildcard-cert.sh \
  --base-domain yourdomain.com \
  --namespace aks-istio-ingress \
  --secret-name istio-wildcard-cert

echo "[DONE] Cluster ${cluster_name} checks complete."
